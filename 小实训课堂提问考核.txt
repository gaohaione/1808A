1 rem 布局原理
rem布局的本质是等比缩放，一般是基于宽度
相对根元素，没有继承性

设置页面字体大小=设置屏幕宽度 / 7.5 + ’px‘
function rem(){
	document.documentElement.style.fontSize = document.documentElement.clientWidth / 7.5 + 'px';
	console.log('1rem'+':'+document.documentElement.clientWidth/7.5+'px')
}
调用rem
rem();
窗口发生触发事件
window.onresize=function(){
	rem();
}




2 react 虚拟dom原理
DOM:浏览器中的概念，用JS对象表示页面上的元素并提供操作DOM对象的API；
虚拟DOM:框架中的概念，是程序员用JS对象模拟页面上的DOM元素和DOM嵌套关系；
  ①本质：用JS对象模拟DOM元素和嵌套的关系；
  ②目的：为了实现页面元素的高效更新；




3 redux搭建和使用
什么是redux 数据状态管理，就是说我们项目中有很多组件需要共享数据，这时候可以使用redux
搭建  我一般都会创建3个文件夹。
action 里面我会定义 方法。这个方法用来触发reducers里面的处理逻辑。
 因为方法里面 会返回两个字段，一个type  用来表示一个字符串， 还有一个data，就是调用actioni 面的方法时传递的参数
reducer 定义store里面的数据和处理逻辑。
处理逻辑通常使用 switch case 来选择对应的action传递过来的type 类型进行处理  
store 里面会导出 reducer 封装好的数据

使用数据：
在 index.js 里面使用 provider 这个组件，将根组件和我们引入的store 联系起来。这样根组件中的所有组件都可以使用redux
在具体的某个组件中，引入 connect 方法，该方法用来将 mapStateToProps mapDispatchToProps 和当前组件关联起来
mapStateToProps 用来引入数据(store)  mapDispatchToProps 用来引入 action里面的方法
使用this.props.store的名称 来获取redux里面的数据   
使用 this.props.actios的名称 来获取action里面的方法



4 什么是跨域
浏览器从一个域名的网页去请求另一个域名的资源时，域名、端口、协议任一不同，都是跨域
 浏览器有同源策略： 不同的ip地址，不同的端口号，不同的网址不同源，不同源就不能发送ajax请求。如果请求就是跨域请求
 
 
5 什么是jsonp
跨域的解决：
1  服务器端设置可跨域
   本地浏览器设置可跨域 （谷歌跨域插件，使用lantern, 加载cors拓展程序）
2  jsonp 
就是利用script的src属性 的可跨域性。请求服务端的返回的数据，返回的数据中 就是一个函数的调用，并把数据作为
参数传进来。
在客户端，创建一个，返回数据中的函数，这样，返回的函数就能够调用成功。里面的参数就是我们要的数据



6 es6 promise 
Promise  诺言  是一种异步编程解决方案（解决回调地狱问题）  
有三种状态：  进行中padding  已成功resolve  已失败 reject
两种情况  进行中-》成功     进行中-》失败
new  Promise(function(resolve,reject){})
通过.then(成功函数,失败函数)

promise.all  所有的 异步操作都成功后，在去执行一个动作  例如 图片都加载完成后显示页面
promise.all :把多个promise实例当做一个promise实例，当所有的状态都完成之后，才会触发新的promise对象的then方法

promise.race  谁先回来处理谁，先到先得







7 es6 的继承
es6的继承主要要注意的是class的继承。
基本用法：Class之间通过使用extends关键字，这比通过修改原型链实现继承，要方便清晰很多

子类必须在constructor方法中调用super方法，否则新建实例时会报错。
这是因为子类没有自己的this对象，而是继承父类的this对象，然后对其进行加工，如果不调用super方法，子类就得不到this对象。
因此，只有调用super之后，才可以使用this关键字。

prototype 和__proto__
一个继承语句同时存在两条继承链：一条实现属性继承，一条实现方法的继承





8 es6 还有哪些拓展
对象的扩展
ES6 允许在对象之中，直接写变量。这时，属性名为变量名, 属性值为变量的值
Object.assign方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）
Object.assign方法的第一个参数是目标对象，后面的参数都是源对象。


数组的扩展
Array.from()    将类似数组的对象转成真正的数组
Array.of方法用于将一组值，转换为数组。

copyWithin()
数组实例的copyWithin方法，在当前数组内部，
将指定位置的成员复制到其他位置（会覆盖原有成员），
然后返回当前数组。target、start、end三个参数
console.log([1,2,3,4,5].copyWithin(0,3))

find的()和findIndex()
数组实例的find方法，用于找出第一个符合条件的数组成员
forEach(callback[, thisObject]) 在数组每个元素项上执行callback
map(callback[, thisObject]) 在数组的每个单元项上执行callback函数，并把返回包含回调函数返回值的新数组
filter(callback[, thisObject]) 返回一个包含所有在回调函数上返回为true的元素的新数组（译者注：callback在这里担任的是过滤器的角色，当元素符合条件，过滤
器就返回true，而filter则会返回所有符合过滤条件的元素）。

every(callback[, thisObject]) 当数组中每一个元素在callback上被返回true时就返回true（译者注：同上，every其实类似filter，只不过它的功能是判断是不是数组中的所有元素都符合条件，并且返回的是布尔值）。
some(callback[, thisObject]) 只要数组中有一项在callback上被返回true，就返回true（译者注：同上，类似every，不过前者要求都符合筛选条件才返回true，后者只要有符合条件的就返回true
reduce(callback[, initialValue]) 使用回调函数 callback(firstValue, secondValue) 把数组列表计算成一个单一值
fill方法使用给定值，填充一个数组。ill方法还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置。



字符串的扩展 
`  增强型的模板字符串
normalize()
includes(), startsWidth(),endsWith()
传统上，JavaScript只有indexOf方法，可以用来确定一个字符串是否包含在另一个字符串中。ES6又提供了三种新方法:
includes()：返回布尔值，表示是否找到了参数字符串。
startsWith()：返回布尔值，表示参数字符串是否在源字符串的头部。
endsWith()：返回布尔值，表示参数字符串是否在源字符串的尾部。

Math对象的扩展
Math.trunc() 、 Math.sign() 、Math.cbrt() 、Math.clz32
Math.imul()、Math.fround()、Math.hypot()、




9 es5的继承 
原型链的继承？ 子类.prototype=new 父类（）；子类的原型继承父类的实例
产生的所有实录对象都具有相同的属性和方法，一个实例对象更改原型对象的属性和方法，其他实例对象也是同样背改变了

借用构造函数  父类对象.call(this.属性)   父类对象.apply(this.['属性值','属性值'])

组合继承/伪经典继承
使用原型链实现对原型属性和方法的继承，而通过构造函数来实现对实例属性的继承




10 vue双向数据绑定原理
vue.js 则是采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。
VUE实现双向数据绑定的原理就是利用了 Object.defineProperty() 这个方法重新定义了对象获取属性值(get)和设置属性值(set)的操作来实现的
view视图层  model模型层  数据同步更新




11 vuex的理解
vuex是一个专为vue.js应用程序开发的状态管理模式

为什么要用vuex？ 当我们要构建一个大中型的单页面应用程序时，vuex可以更好的帮助我们在组件的外部统一管理状态

vuex核心：
State是唯一的数据源  是单一的状态树
Getters使用它派生出些新的状态
Mutations更改vuex的store中的状态的唯一方法  ---就是提交mutation
Actions发布命令--提交的mutation 而不是直接变更状态。 
Modules面对复杂的应用程序时  管理的状态比较多时  我们需要将vuex的store对象分割成模块 modules

怎么用VueX？cnpm i vuex  
import Vue from "vue";
import Vuex from "vuex";
Vue.use(Vuex)




12 计算属性和watch的区别
 watch  监听  用于观察Vue实例上的数据变动  一种方式来观察和响应 Vue 实例上的数据变动
 computed  实时计算   computed是在HTML DOM加载后马上执行的，如赋值  computed计算属性是基于它们的依赖进行缓存的
 计算属性将被混入到 Vue 实例中。所有 getter 和 setter 的 this 上下文自动地绑定为 Vue 实例
 


 
13 路由导航守卫（路由钩子）
路由组件内的守卫：
beforeRouteEnter 进入路由前
beforeRouteUpdate (2.2) 路由复用同一个组件时
beforeRouteLeave 离开当前路由时


vue-router全局有三个守卫：
router.beforeEach 全局前置守卫 进入路由之前
router.beforeResolve 全局解析守卫(2.5.0+) 在beforeRouteEnter调用之后调用
router.afterEach 全局后置钩子 进入路由之后

全局钩子函数 beforeEach 每次路由变化都要执行一遍
组件钩子函数 beforeRouteEnter beforeRouteUpdate beforeLeave
to(路由对象)即将要进入的目标
from 当前导航要离开的路由
next方法 resolve 钩子函数 必须要用的方法




14 原型和原型链
在js中，我们创建一个构造函数A,浏览器就会在内存中创建一个对象B,每个函数都有一个属性 prototype指向这个对象，这个对象就是函数的原型对象，简称函数的原型
每个对象都有一个内部属性prototype,这个属性值可以为空或一个对象，这个对象又有自己的原型，这样形成一个链条，我们称之为原型链




15 html5 和 css3 新特性
html5:
用于绘画的 canvas 元素
用于媒介回放的 video 和 audio 元素
对本地离线存储的更好的支持
新的特殊内容元素   语义化标签，比如 article、footer、header、nav、section
新的表单控件，比如 calendar、date、time、email、url、search
HTML5 拖放 为了使元素可拖动，把 draggable 属性设置为 true ：
添加了web存储功能，localStorage和sessionStorage
本地储存的两种方式
LocalStorage时持久化的本地储存，除非主动删除数据，否则数据永远不会过期
SessionStorage不是持久化的本地储存，是会话级的储存
 
css3:

1.   CSS3实现圆角（border-radius），阴影（box-shadow），
2.    对文字加特效（text-shadow、），线性渐变（gradient），旋转（transform）
3.    transform:rotate(9deg) scale(0.85,0.90) translate(0px,-30px) skew(-9deg,0deg);// 旋转,缩放,定位,倾斜
4.    增加了更多的CSS选择器  多背景 rgba 
5.    在CSS3中唯一引入的伪元素是 ::selection.
6.    媒体查询，多栏布局
7.    border-image
8.rem布局，响应式布局




